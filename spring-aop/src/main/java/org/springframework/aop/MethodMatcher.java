/*
 * Copyright 2002-2019 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.aop;

import java.lang.reflect.Method;

/**
 * 切点的一部分，确认目标方法是否适合增强
 * <p>
 * MethodMatcher可以是静态的，或者是运行时的（动态的）
 * 静态匹配包括方法及方法属性，动态匹配包括使特定调用的参数可用，以及运行应用于连接点的先前增强的所有影响
 * <p>
 * 如果{@link #isRuntime()}方法返回false，可以通过静态执行来进行判断，此方法的调用会拥有相同的结果，无论什么参数
 * 这就意味着如果{@link #isRuntime()}返回false，这个三个入参的{@link #matches(java.lang.reflect.Method, Class, Object[])}将不会被调用
 *
 * <p>If an implementation returns {@code true} from its 2-arg
 * {@link #matches(java.lang.reflect.Method, Class)} method and its {@link #isRuntime()} method
 * returns {@code true}, the 3-arg {@link #matches(java.lang.reflect.Method, Class, Object[])}
 * method will be invoked <i>immediately before each potential execution of the related advice</i>,
 * to decide whether the advice should run. All previous advice, such as earlier interceptors
 * in an interceptor chain, will have run, so any state changes they have produced in
 * parameters or ThreadLocal state will be available at the time of evaluation.
 *
 * <p>Concrete implementations of this interface typically should provide proper
 * implementations of {@link Object#equals(Object)} and {@link Object#hashCode()}
 * in order to allow the matcher to be used in caching scenarios &mdash; for
 * example, in proxies generated by CGLIB.
 * <p>
 * 如果一个两个入参的{@link #matches(java.lang.reflect.Method, Class)}方法通过{@link #isRuntime()}方法返回了true
 * 三个入参的{@link #matches(java.lang.reflect.Method, Class, Object[])}方法会在每次执行相关增强之前被调用
 * 以此来确认增强是否可用，所有的前置增强，比如早期的拦截器链中的interceptors，将会执行
 * 所以，任何由interceptors产生的参数或者ThreadLocal的状态的变化，都会在判断时可用
 * <p>
 * 这个接口的具体代表性实现需要提供合适的{@link Object#equals(Object)}和{@link Object#hashCode()}的实现
 * 为了允许过滤器可以在缓存方案中使用，比如使用CGLIB生成代理
 * @author Rod Johnson
 * @see Pointcut
 * @see ClassFilter
 * @since 11.11.2003
 */
public interface MethodMatcher {

	/**
	 * 可以匹配所有方法的标准实例
	 */
	MethodMatcher TRUE = TrueMethodMatcher.INSTANCE;

	/**
	 * 使用静态的方法判断给定的方法是否匹配
	 * 如果此方法返回false，或者{@link #isRuntime()}返回了false，不进行运行时检查
	 * @param method 需要进行判断的方法
	 * @param targetClass 目标类
	 * @return 静态判断此方法是否符合条件
	 */
	boolean matches(Method method, Class<?> targetClass);

	/**
	 * MethodMatcher是否是动态校验的，如果是，即使两个入参的matches方法返回true，也要在两个入参的matches方法设置一个最终调用
	 * 可以在AOP代理创建后调用，可以在每个方法调用之后不必再次调用
	 * @return 是否和三个入参的matches方法再运行时匹配，在静态匹配已经通过的情况下
	 */
	boolean isRuntime();

	/**
	 * 判断此方法是否有动态匹配
	 * 此方法仅会在两个入参的matches方法返回true的情况下调用
	 * 如果{@link #isRuntime()}方法返回true，在可能的增强之前，在增强链上的任何增强之后运行
	 * @param method the candidate method
	 * @param targetClass the target class
	 * @param args arguments to the method
	 * @return whether there's a runtime match
	 * @see MethodMatcher#matches(Method, Class)
	 */
	boolean matches(Method method, Class<?> targetClass, Object... args);

}
